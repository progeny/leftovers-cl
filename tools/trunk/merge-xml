#!/usr/bin/python

# merge-xml: a Python wrapper to merge.xslt.

# The merge.xslt stylesheet is LGPL, and could be found (in March
# 2004) at http://www.informatik.hu-berlin.de/~obecker/XSLT/.  It has
# several interfaces; the one we're using uses the document being
# applied as the first document and the document in the file named as
# the "with" parameter as the second.  The output document from the
# transformation then is the merged document.

import sys
import os
import optparse
import libxml2
import libxslt

merge_xslt_paths = [".", "/usr/share/merge-xml"]

def merge_two(doc, fn):
    "merge the libxml2 parse tree in doc with the XML file fn"
    global style

    result = style.applyStylesheet(doc, { "with": "'%s'" % (fn,) })
    return result

def main():
    global style
    global merge_xslt_paths

    libxml2.keepBlanksDefault(0)

    usage = "usage: %prog [options] file file [file] ..."
    optionparser = optparse.OptionParser(usage=usage)
    optionparser.add_option("-d", action="store_true", dest="debug",
                            default=False, help="show debugging info")
    optionparser.add_option("-o", "--output", dest="outfn", default="",
                            help="write output to FILE", metavar="FILE")
    optionparser.add_option("-s", "--stylesheet-path", dest="sheetpath",
                            default="", help="path to merge.xslt")

    (opts, args) = optionparser.parse_args()

    try:
        if len(args) < 2:
            raise RuntimeError, "not enough files specified"

        if opts.sheetpath:
            merge_xslt_paths.insert(opts.sheetpath, 0)

        xslt_path = None
        for p in merge_xslt_paths:
            if os.path.exists(p + "/merge.xslt"):
                xslt_path = p + "/merge.xslt"
                break

        if not xslt_path:
            raise RuntimeError, "could not find merge.xslt"

        if opts.outfn:
            outfile = open(opts.outfn, "w")
        else:
            outfile = sys.stdout

        styledoc = libxml2.parseFile(xslt_path)
        style = libxslt.parseStylesheetDoc(styledoc)

        doc = libxml2.parseFile(args[0])

        for fn in args[1:]:
            doc = merge_two(doc, fn)

        doc.formatDump(outfile, 1)
    except:
        if opts.debug:
            import traceback
            traceback.print_exc()
        else:
            sys.stderr.write("error: " + str(sys.exc_info()[1]) + "\n")

        sys.exit(1)

if __name__ == "__main__":
    main()
